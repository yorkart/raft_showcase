syntax = "proto3";

package grpc.raft_showcase.raft;

/// An RPC sent by a cluster leader to replicate log entries (§5.3), and as a heartbeat (§5.2).
message AppendEntriesRequest {
  /// The leader's current term.
  uint64 term = 1;
  /// The leader's ID. Useful in redirecting clients.
  uint64 leader_id = 2;
  /// The index of the log entry immediately preceding the new entries.
  uint64 prev_log_index = 3;
  /// The term of the `prev_log_index` entry.
  uint64 prev_log_term = 4;
  /// The new log entries to store.
  ///
  /// This may be empty when the leader is sending heartbeats. Entries
  /// are batched for efficiency.
  repeated Entry entries = 5;
  /// The leader's commit index.
  uint64 leader_commit = 6;
}

/// The response to an `AppendEntriesRequest`.
message AppendEntriesResponse {
  /// The responding node's current term, for leader to update itself.
  uint64 term = 1;
  /// Will be true if follower contained entry matching `prev_log_index` and `prev_log_term`.
  bool success = 2;
  /// A value used to implement the _conflicting term_ optimization outlined in §5.3.
  ///
  /// This value will only be present, and should only be considered, when `success` is `false`.
  optional ConflictOpt conflict_opt = 3;
}

/// A struct used to implement the _conflicting term_ optimization outlined in §5.3 for log replication.
///
/// This value will only be present, and should only be considered, when an `AppendEntriesResponse`
/// object has a `success` value of `false`.
///
/// This implementation of Raft uses this value to more quickly synchronize a leader with its
/// followers which may be some distance behind in replication, may have conflicting entries, or
/// which may be new to the cluster.
message ConflictOpt {
  /// The term of the most recent entry which does not conflict with the received request.
  uint64 term = 1;
  /// The index of the most recent entry which does not conflict with the received request.
  uint64 index = 2;
}

/// A Raft log entry.
message Entry {
  /// This entry's term.
  uint64 term = 1;
  /// This entry's index.
  uint64 index = 2;
  /// This entry's payload.
  oneof payload {
    EntryNormal entry_normal = 3;
    EntryConfigChange entry_config_change = 4;
    EntrySnapshotPointer entry_snapshot_pointer = 5;
  }
}

/// A normal log entry.
message EntryNormal {
  /// The contents of this entry.
  bytes data = 1;
}

/// A log entry holding a config change.
message EntryConfigChange {
  /// Details on the cluster's membership configuration.
  MembershipConfig membership = 1;
}

/// A log entry pointing to a snapshot.
///
/// This will only be present when read from storage. An entry of this type will never be
/// transmitted from a leader during replication, an `InstallSnapshotRequest`
/// RPC will be sent instead.
message EntrySnapshotPointer {
  /// The ID of the snapshot, which is application specific, and probably only meaningful to the storage layer.
  string id = 1;
  /// The cluster's membership config covered by this snapshot.
  MembershipConfig membership = 2;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

/// A model of the membership configuration of the cluster.
message MembershipConfig {
  /// All members of the Raft cluster.
  repeated uint64 members = 1; // HashSet<NodeId>,
  /// All members of the Raft cluster after joint consensus is finalized.
  ///
  /// The presence of a value here indicates that the config is in joint consensus.
  repeated uint64 members_after_consensus = 2; // Option<HashSet<NodeId>>,
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

/// An RPC sent by candidates to gather votes (§5.2).
message VoteRequest {
  /// The candidate's current term.
  uint64 term = 1;
  /// The candidate's ID.
  uint64 candidate_id = 2;
  /// The index of the candidate’s last log entry (§5.4).
  uint64 last_log_index = 3;
  /// The term of the candidate’s last log entry (§5.4).
  uint64 last_log_term = 4;
}

/// The response to a `VoteRequest`.
message VoteResponse {
  /// The current term of the responding node, for the candidate to update itself.
  uint64 term = 1;
  /// Will be true if the candidate received a vote from the responder.
  bool vote_granted = 2;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

/// An RPC sent by the Raft leader to send chunks of a snapshot to a follower (§7).
message InstallSnapshotRequest {
  /// The leader's current term.
  uint64 term = 1;
  /// The leader's ID. Useful in redirecting clients.
  uint64 leader_id = 2;
  /// The snapshot replaces all log entries up through and including this index.
  uint64 last_included_index = 3;
  /// The term of the `last_included_index`.
  uint64 last_included_term = 4;
  /// The byte offset where this chunk of data is positioned in the snapshot file.
  uint64 offset = 5;
  /// The raw bytes of the snapshot chunk, starting at `offset`.
  bytes data = 6;
  /// Will be `true` if this is the last chunk in the snapshot.
  bool done = 7;
}

/// The response to an `InstallSnapshotRequest`.
message InstallSnapshotResponse {
  /// The receiving node's current term, for leader to update itself.
  uint64 term = 1;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

service Raft {
  rpc append_entries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
  rpc install_snapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse) {}
  rpc vote(VoteRequest) returns (VoteResponse) {}
}